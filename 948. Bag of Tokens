class Solution {
public:
    int bagOfTokensScore(vector<int>& tokens, int power) {
        int score = 0;
        int ans = 0;
        int n = tokens.size();
        sort(tokens.begin(), tokens.end());

        for (int i = 0; i < tokens.size();) {
            if (power >= tokens[i]) {
                score += 1;
                power -= tokens[i];
                tokens.erase(tokens.begin() + i);
            } else if (power < tokens[i] && score >= 1) {
                score -= 1;
                power += tokens.back();
                tokens.pop_back(); 
            } else {
                break;
            }
            ans = max(ans, score);
        }
        return ans;
    }
};

// 2nd Approach

class Solution {
public:
    int bagOfTokensScore(vector<int>& tokens, int power) {
        int score = 0;
        int n = tokens.size();
        int ans = 0;
        int left = 0;
        int right = n - 1;
        sort(tokens.begin(), tokens.end());
        while(left <= right){
            if(power >= tokens[left]){
                power -= tokens[left++];
                score += 1;

            }
            else if(score >= 1){
                power += tokens[right--];
                score -= 1;
            }
            else{
                break;
            }
            ans = max(ans,score);
        }
        return ans;
    }
};
