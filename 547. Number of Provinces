class Solution {
public:

    void dfs(int node, vector<int> adjLs[], int vis[]){
        vis[node] = 1;
        for(auto it:adjLs[node]){
            if(!vis[it]){
                dfs(it,adjLs,vis);
            }
        }
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<int> adjLs[n];
        vector<int> vis(n, 0);  // Use a vector instead of a fixed-size array

        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(isConnected[i][j] == 1 && i != j){
                    adjLs[i].push_back(j);
                    adjLs[j].push_back(i);
                } 
            }
        }
        
        int cnt = 0;
        for(int i=0; i<n; i++){
            if(!vis[i]){
                cnt++;
                dfs(i,adjLs,vis.data());  // Pass the pointer to the vector data
            }
        }
        return cnt;
    }
};
