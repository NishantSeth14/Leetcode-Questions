class Solution {
public:

     int merge(vector<int>&arr, int low, int mid, int high){

        vector<int>temp;

 

        int left = low;

        int right = mid+1;

        long long cnt =  0;

 

        //count reverse pairs

        while(left<=mid && right<=high){

            long long condition = (2LL * arr[right]);

            if(arr[left] > condition){

                cnt += (mid - left + 1);

                right ++;

            }

            else left++;

        }

 

        //merge left and right subarrays

        left = low;

        right = mid+1;
 

        while(left<=mid && right<=high){

            if(arr[left]<=arr[right]){

                temp.push_back(arr[left]);

                left++;

            }

            else{

                temp.push_back(arr[right]);

                right++;

            }

        }

        while(left<=mid){

            temp.push_back(arr[left++]);

        }

        while(right<=high){

            temp.push_back(arr[right++]);

        }
 

        //replace the array elements to make sorted

        for(int i=low;i<=high;i++){

            arr[i] = temp[i-low];

        }

 

        return cnt;

    }

    int mergeSort(vector<int>&arr, int low, int high){

        long long cnt = 0;

        if(low>=high)return cnt;

        int mid = (low+high)/2;

        cnt += mergeSort(arr, low, mid);

        cnt += mergeSort(arr, mid+1, high);

        cnt += merge(arr, low, mid, high);
 

        return cnt;

    }

    int reversePairs(vector<int>& nums) {
        int n = nums.size();
        return mergeSort(nums, 0, n-1);
    }
};
