ANS -->

#include <iostream>
#include <vector>
#include <numeric>

class Solution {
 public:
  int peopleAwareOfSecret(int n, int delay, int forget) {
    constexpr int kMod = 1'000'000'007;
    long share = 0;
    // dp[i] := # of people who know the secret at day i
    std::vector<int> dp(n);  // Map day i to i + 1
    dp[0] = 1;

    for (int i = 1; i < n; ++i) {
      if (i - delay >= 0)
        share += dp[i - delay];
      if (i - forget >= 0)
        share -= dp[i - forget];
      share += kMod;
      share %= kMod;
      dp[i] = share;
    }

    // People before day n - forget - 1 have already forgotten the secret
    return std::accumulate(dp.end() - forget, dp.end(), 0, [&](int subtotal, int d) {
      return (subtotal + d) % kMod;
    });
  }
};

int main() {
  Solution solution;
  int n, delay, forget;

  // Input from the user
  std::cout << "Enter the number of days (n): ";
  std::cin >> n;
  std::cout << "Enter the delay factor: ";
  std::cin >> delay;
  std::cout << "Enter the forget factor: ";
  std::cin >> forget;

  int result = solution.peopleAwareOfSecret(n, delay, forget);
  std::cout << "Number of people aware of the secret: " << result << std::endl;

  return 0;
}
